<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class AudiencePersona extends Model
{
    use HasFactory;

    protected $fillable = [
        'team_id',
        'social_account_id',
        'name',
        'avatar',
        'age_range_start',
        'age_range_end',
        'gender',
        'location',
        'interests',
        'pain_points',
        'goals',
        'behaviors',
        'preferred_content_types',
        'active_hours',
        'engagement_rate',
        'description',
        'is_auto_generated'
    ];

    protected $casts = [
        'interests' => 'array',
        'pain_points' => 'array',
        'goals' => 'array',
        'behaviors' => 'array',
        'preferred_content_types' => 'array',
        'active_hours' => 'array',
        'engagement_rate' => 'float',
        'is_auto_generated' => 'boolean'
    ];

    public function team(): BelongsTo
    {
        return $this->belongsTo(Team::class);
    }

    public function socialAccount(): BelongsTo
    {
        return $this->belongsTo(SocialAccount::class);
    }

    public function clients(): HasMany
    {
        return $this->hasMany(Client::class);
    }

    public function getEngagementRateLabel(): string
    {
        if ($this->engagement_rate >= 5) {
            return 'Very High';
        } elseif ($this->engagement_rate >= 3) {
            return 'High';
        } elseif ($this->engagement_rate >= 1) {
            return 'Medium';
        } else {
            return 'Low';
        }
    }

    public function getTopInterests(int $limit = 5): array
    {
        return array_slice($this->interests ?? [], 0, $limit);
    }

    public function getTopPainPoints(int $limit = 3): array
    {
        return array_slice($this->pain_points ?? [], 0, $limit);
    }

    public function getTopGoals(int $limit = 3): array
    {
        return array_slice($this->goals ?? [], 0, $limit);
    }

    public function getTopRecommendations(int $limit = 3): array
    {
        $recommendations = [];

        // Content recommendations based on interests and preferred content types
        if ($this->interests && $this->preferred_content_types) {
            $recommendations[] = "Create content about " . implode(", ", $this->getTopInterests(2)) . 
                               " using " . implode(", ", array_slice($this->preferred_content_types, 0, 2));
        }

        // Timing recommendations based on active hours
        if ($this->active_hours) {
            $bestHours = array_slice($this->active_hours, 0, 2);
            $recommendations[] = "Post during peak activity hours: " . implode(", ", $bestHours);
        }

        // Engagement recommendations based on behaviors
        if ($this->behaviors) {
            $recommendations[] = "Focus on " . implode(", ", array_slice($this->behaviors, 0, 2)) . 
                               " to increase engagement";
        }

        return array_slice($recommendations, 0, $limit);
    }

    public function scopeByTeam($query, $teamId)
    {
        return $query->where('team_id', $teamId);
    }

    public function scopeByAccount($query, $accountId)
    {
        return $query->where('social_account_id', $accountId);
    }

    public function scopeAutoGenerated($query)
    {
        return $query->where('is_auto_generated', true);
    }

    public function scopeManual($query)
    {
        return $query->where('is_auto_generated', false);
    }

    public function scopeHighEngagement($query)
    {
        return $query->where('engagement_rate', '>=', 3);
    }
}