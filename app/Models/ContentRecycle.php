<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class ContentRecycle extends Model
{
    use HasFactory;

    protected $fillable = [
        'post_id',
        'created_by',
        'type',
        'strategy',
        'new_caption',
        'new_schedule',
        'ai_score',
        'is_approved',
        'performance_metrics',
        'ai_suggestions'
    ];

    protected $casts = [
        'ai_score' => 'decimal:2',
        'is_approved' => 'boolean',
        'new_schedule' => 'datetime',
        'performance_metrics' => 'array',
        'ai_suggestions' => 'array'
    ];

    /**
     * Get the post that owns the content recycle.
     */
    public function post(): BelongsTo
    {
        return $this->belongsTo(Post::class);
    }

    /**
     * Get the user that created the content recycle.
     */
    public function creator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    /**
     * Get the recycled media for the content recycle.
     */
    public function recycledMedia(): HasMany
    {
        return $this->hasMany(RecycledMedia::class);
    }

    /**
     * Check if the content recycle is approved.
     */
    public function isApproved(): bool
    {
        return $this->is_approved;
    }

    /**
     * Check if the content recycle is auto-generated.
     */
    public function isAutoGenerated(): bool
    {
        return $this->type === 'auto';
    }

    /**
     * Check if the content recycle is manually created.
     */
    public function isManual(): bool
    {
        return $this->type === 'manual';
    }

    /**
     * Get the strategy name.
     */
    public function getStrategyName(): string
    {
        $strategies = [
            'performance_improvement' => 'تحسين الأداء',
            'time_change' => 'تغيير وقت النشر',
            'similar_content_reuse' => 'إعادة استخدام محتوى مشابه'
        ];

        return $strategies[$this->strategy] ?? $this->strategy;
    }

    /**
     * Get the AI score as a percentage.
     */
    public function getAiScorePercentage(): int
    {
        return (int) ($this->ai_score * 20); // Convert 0-5 score to 0-100 percentage
    }

    /**
     * Get the performance metrics.
     */
    public function getPerformanceMetrics(): array
    {
        return $this->performance_metrics ?? [];
    }

    /**
     * Get the AI suggestions.
     */
    public function getAiSuggestions(): array
    {
        return $this->ai_suggestions ?? [];
    }

    /**
     * Scope a query to only include approved content recycles.
     */
    public function scopeApproved($query)
    {
        return $query->where('is_approved', true);
    }

    /**
     * Scope a query to only include auto-generated content recycles.
     */
    public function scopeAuto($query)
    {
        return $query->where('type', 'auto');
    }

    /**
     * Scope a query to only include manual content recycles.
     */
    public function scopeManual($query)
    {
        return $query->where('type', 'manual');
    }

    /**
     * Scope a query to only include content recycles with high AI scores.
     */
    public function scopeHighScore($query, float $threshold = 4.0)
    {
        return $query->where('ai_score', '>=', $threshold);
    }

    /**
     * Scope a query to only include content recycles by strategy.
     */
    public function scopeByStrategy($query, string $strategy)
    {
        return $query->where('strategy', $strategy);
    }
} 